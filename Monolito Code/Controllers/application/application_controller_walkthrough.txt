DÚVDAS

1)
"""
ActionController::Base
"""
O que essa sintaxe dos :: faz?


2)
"""
before_action :load_cart
before_action :devise_parameters_permitted, if: :devise_controller?
before_action :apply_affiliate_cookie, if: -> { params[:ref].present? }

impersonates :user

require 'will_paginate/array'
"""

***Onde chamamos estas variáveis? 
  -load_cart
  -devise_parameters_permitted
  -apply_affiliate_cookie

***Estas actions são padrão do rails? 
  -before_action
  -impersionates
  -require 


3)
"""
  private

  def set_pixel
    @store_pixel = Store.friendly.find(current_visit.store.id).facebook_pixel_id
  rescue ActiveRecord::RecordNotFound => error
    @store_pixel = nil
  end
"""

***Mais uma vez esta sintax, agora dentro de uma função
  -rescue ActiveRecord::RecordNotFound => error

***DB
  -Store.friendly -> o que é "friendly"?

***Private
  -Por que precisa ser private? acho que não peguei 100% este conceito

4)
"""
  def after_sign_in_path_for(resource_or_scope)
    # CrispService.update_user_info(current_user) if current_user
    merge_carts if current_user
    super
  end

"""

***Na chamada da função
  -Passamos um parâmetro (resource_or_scope) e não usamos ele dentro da função?

***Quem são merge_carts e current_user?

5) 
"""
  def apply_affiliate_cookie
    cookies[:aff_tag] = { value: params[:ref], expires: 7.days.from_now }
  end
"""

***sintaxe
  -"cookies" é uma palavra reservada?
  -O que está expressão está fazendo?
  -quem é "aff_tag"?

6)
"""
  def load_cart
    @cart = Cart.find_by id: session[:cart_id]
  end
"""

***Sintaxe
  -Quem é session?

7)
"""
  def render_404
    respond_to do |format|
      format.html { redirect_to root_url }
      # format.html { render :file => "#{Rails.root}/public/404", :layout => false, :status => :not_found }
      format.xml  { head :not_found }
      format.any  { head :not_found }
    end
  end
"""

***Sintaxe
  -Quem é respond_to?
  -Qual a diferença entre .xml e .html?

8)
"""
  def log_error(itens)
    logger.error "xxxxxxxxx ERROR: #{params[:action]} xxxxxxxxx"
    itens.each do |item|
      logger.error item.to_s
      logger.info '---------------------------------'
    end
    render file: 'public/500.html', status: :internal_server_error, layout: false
  end
"""

***Sintaxe
  -Quem é logger?
  -Como chega essa entrada itens?


9)
"""
  protected

  # Whitelist certain parameters when generating URLs
  # See https://github.com/rails/rails/issues/26289 for more info
  def safe_params
    params.except(:host, :port, :protocol, :domain, :subdomain).permit!
  end

  # Makes the method above available to the rest of the application
  helper_method :safe_params
"""

***sintaxe
  -O que o permit! faz?
  -Chamamos "helper_method" sem def/ end?











